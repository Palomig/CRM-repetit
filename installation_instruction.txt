╔══════════════════════════════════════════════════════════════════════╗
║                                                                      ║
║       🎓 CRM СИСТЕМА ДЛЯ РЕПЕТИТОРСКОГО ЦЕНТРА                      ║
║       📦 Инструкция по установке и запуску                          ║
║                                                                      ║
╚══════════════════════════════════════════════════════════════════════╝


═══════════════════════════════════════════════════════════════════════
  ⚡ БЫСТРЫЙ СТАРТ (3 МИНУТЫ)
═══════════════════════════════════════════════════════════════════════

ВАШИ ДАННЫЕ TIMEWEB:
  Домен:     https://cw95865.tmweb.ru/
  SSH:       cw95865@cw95865.tmweb.ru
  Корневая:  /home/c/cw95865
  БД:        cw95865_rmtutori
  Логин БД:  cw95865_rmtutori
  Пароль БД: 123456789

1. ГЕНЕРАЦИЯ ПРОЕКТА
   
   python3 setup_project.py
   
   ✅ Создаст всю структуру автоматически!


2. АВТОМАТИЧЕСКИЙ ДЕПЛОЙ

   bash deploy_to_timeweb.sh
   
   ✅ Загрузит на ваш Timeweb сервер!
   ✅ Все пути уже настроены под ваш хостинг!


3. ЗАВЕРШЕНИЕ НАСТРОЙКИ (на сервере)

   ssh cw95865@cw95865.tmweb.ru
   cd /home/c/cw95865/public_html/tutor_crm
   source ~/venv/bin/activate
   
   # Создайте .env файл (скопируйте из .env.production)
   nano .env
   
   # Примените миграции
   python manage.py migrate
   python manage.py collectstatic --noinput
   python manage.py createsuperuser
   
   # Перезапуск
   touch /home/c/cw95865/public_html/wsgi.py
   
   ✅ Откройте https://cw95865.tmweb.ru/


═══════════════════════════════════════════════════════════════════════
  📋 ЧТО НУЖНО ДЛЯ НАЧАЛА
═══════════════════════════════════════════════════════════════════════

ЛОКАЛЬНО:
  • Python 3.6 или выше
  • pip (менеджер пакетов Python)
  • Git (опционально, но рекомендуется)

ДЛЯ TIMEWEB:
  • Аккаунт на Timeweb
  • SSH доступ
  • MySQL база данных (создать в панели управления)
  • Домен


═══════════════════════════════════════════════════════════════════════
  🎯 ВАРИАНТ 1: АВТОМАТИЧЕСКАЯ УСТАНОВКА (РЕКОМЕНДУЕТСЯ)
═══════════════════════════════════════════════════════════════════════

ШАГИ:

1. Дайте права на выполнение скриптов:
   
   chmod +x start.sh deploy_to_timeweb.sh


2. Запустите мастер-скрипт:
   
   bash start.sh
   
   
3. Выберите в меню:
   
   1) Создать новый проект       → создаст всю структуру
   2) Деплой на Timeweb          → загрузит на сервер
   4) Запустить локальный сервер → для разработки
   
   
✅ ВСЁ! Скрипт сделает всё автоматически!


═══════════════════════════════════════════════════════════════════════
  🎯 ВАРИАНТ 2: ПОШАГОВАЯ УСТАНОВКА
═══════════════════════════════════════════════════════════════════════

ШАГ 1: ГЕНЕРАЦИЯ ПРОЕКТА
─────────────────────────

python3 setup_project.py

Что создаст:
  ✓ Папку tutor_crm/ со всеми файлами
  ✓ Django приложения (students, teachers, schedule, finance, tasks)
  ✓ HTML templates с Tailwind CSS
  ✓ Конфигурационные файлы
  ✓ Документацию


ШАГ 2: НАСТРОЙКА ЛОКАЛЬНО
──────────────────────────

cd tutor_crm

# Создать виртуальное окружение
python3 -m venv venv

# Активировать (Linux/Mac)
source venv/bin/activate

# Активировать (Windows)
venv\Scripts\activate

# Установить зависимости
pip install -r requirements.txt

# Создать .env файл
cp .env.example .env

# Отредактировать .env (см. раздел "Настройка .env")
nano .env

# Применить миграции
python manage.py makemigrations
python manage.py migrate

# Собрать статику
python manage.py collectstatic --noinput

# Создать суперпользователя
python manage.py createsuperuser

# Запустить сервер
python manage.py runserver


ШАГ 3: ПРОВЕРКА
────────────────

Откройте в браузере:
  • http://127.0.0.1:8000          - главная страница
  • http://127.0.0.1:8000/admin/   - админ-панель


═══════════════════════════════════════════════════════════════════════
  ⚙️  НАСТРОЙКА .env ФАЙЛА
═══════════════════════════════════════════════════════════════════════

ЛОКАЛЬНАЯ РАЗРАБОТКА:
─────────────────────

DEBUG=True
SECRET_KEY=any-random-string-for-development
ALLOWED_HOSTS=localhost,127.0.0.1

DB_NAME=tutor_crm
DB_USER=root
DB_PASSWORD=
DB_HOST=localhost
DB_PORT=3306


PRODUCTION (TIMEWEB) - ВАШИ ДАННЫЕ:
─────────────────────────────────────

DEBUG=False
SECRET_KEY=сгенерируйте-длинный-случайный-ключ-50-символов
ALLOWED_HOSTS=cw95865.tmweb.ru

DB_NAME=cw95865_rmtutori
DB_USER=cw95865_rmtutori
DB_PASSWORD=123456789
DB_HOST=localhost
DB_PORT=3306


ГЕНЕРАЦИЯ SECRET_KEY:
─────────────────────

python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"


═══════════════════════════════════════════════════════════════════════
  🌐 ДЕПЛОЙ НА TIMEWEB
═══════════════════════════════════════════════════════════════════════

АВТОМАТИЧЕСКИЙ СПОСОБ (РЕКОМЕНДУЕТСЯ):
───────────────────────────────────────

bash deploy_to_timeweb.sh

Скрипт уже настроен на ваши данные:
  • Домен: cw95865.tmweb.ru
  • Корневая: /home/c/cw95865
  • Пользователь: cw95865


ЧТО ДЕЛАЕТ СКРИПТ:
──────────────────

1. Создаёт архив проекта
2. Загружает на сервер через SSH
3. Распаковывает в public_html/tutor_crm
4. Создаёт виртуальное окружение
5. Устанавливает зависимости
6. Настраивает права доступа
7. Готово!


ПОСЛЕ АВТОМАТИЧЕСКОГО ДЕПЛОЯ:
──────────────────────────────

Подключитесь по SSH:

ssh cw95865@cw95865.tmweb.ru

cd /home/c/cw95865/public_html/tutor_crm
source ~/venv/bin/activate

# Создайте .env файл (используйте готовый .env.production)
nano .env

# Вставьте:
DEBUG=False
SECRET_KEY=сгенерируйте-новый-ключ
ALLOWED_HOSTS=cw95865.tmweb.ru

DB_NAME=cw95865_rmtutori
DB_USER=cw95865_rmtutori
DB_PASSWORD=123456789
DB_HOST=localhost
DB_PORT=3306

# Примените миграции
python manage.py migrate

# Соберите статику
python manage.py collectstatic --noinput

# Создайте суперпользователя
python manage.py createsuperuser

# Перезапустите WSGI
touch /home/c/cw95865/public_html/wsgi.py


═══════════════════════════════════════════════════════════════════════
  📦 СОЗДАНИЕ БАЗЫ ДАННЫХ НА TIMEWEB
═══════════════════════════════════════════════════════════════════════

1. Войдите в панель управления Timeweb

2. Раздел "Базы данных" → MySQL

3. Создайте новую базу данных:
   Имя: tutor_crm (или любое)
   
4. Создайте пользователя БД или используйте существующего

5. Запомните:
   • Имя базы данных
   • Имя пользователя
   • Пароль
   
6. Внесите эти данные в .env файл на сервере


═══════════════════════════════════════════════════════════════════════
  🔄 ОБНОВЛЕНИЕ ПРОЕКТА
═══════════════════════════════════════════════════════════════════════

ЛОКАЛЬНО:
─────────

cd tutor_crm
source venv/bin/activate
git pull  # если используете Git
pip install -r requirements.txt --upgrade
python manage.py migrate
python manage.py collectstatic --noinput


НА TIMEWEB:
───────────

Способ 1 - Автоматически:
bash deploy_to_timeweb.sh username domain.ru

Способ 2 - Вручную:
ssh username@domain.ru
cd ~/public_html/tutor_crm
source ~/venv/bin/activate
# Загрузите новые файлы через FTP
python manage.py migrate
python manage.py collectstatic --noinput
touch ~/public_html/wsgi.py


═══════════════════════════════════════════════════════════════════════
  🐛 РЕШЕНИЕ ПРОБЛЕМ
═══════════════════════════════════════════════════════════════════════

ОШИБКА 500 НА САЙТЕ:
─────────────────────

1. Проверьте логи:
   tail -f ~/logs/error.log

2. Проверьте wsgi.py:
   cat ~/public_html/wsgi.py
   # Пути должны быть правильные!

3. Проверьте права:
   chmod 755 ~/public_html/wsgi.py
   chmod 644 ~/public_html/.htaccess

4. Проверьте .env:
   ls -la ~/public_html/tutor_crm/.env
   # Файл должен существовать!

5. Перезапустите:
   touch ~/public_html/wsgi.py


СТАТИКА НЕ ЗАГРУЖАЕТСЯ:
────────────────────────

cd ~/public_html/tutor_crm
source ~/venv/bin/activate
python manage.py collectstatic --noinput


НЕ ПОДКЛЮЧАЕТСЯ К БД:
──────────────────────

1. Проверьте .env файл
2. Проверьте что БД создана в панели Timeweb
3. Проверьте права пользователя БД


МОДУЛЬ НЕ НАЙДЕН:
──────────────────

source ~/venv/bin/activate
pip install -r requirements.txt --force-reinstall


═══════════════════════════════════════════════════════════════════════
  📚 ДОКУМЕНТАЦИЯ
═══════════════════════════════════════════════════════════════════════

QUICKSTART.md       - Быстрый старт (3 минуты)
USAGE_GUIDE.md      - Полное руководство пользователя
DEPLOY.md           - Подробная инструкция по деплою
GIT_SETUP.md        - Настройка Git и CI/CD
SUMMARY.md          - Итоговое резюме проекта
README.md           - Обзор проекта


═══════════════════════════════════════════════════════════════════════
  ✅ ЧЕКЛИСТ ПОСЛЕ УСТАНОВКИ
═══════════════════════════════════════════════════════════════════════

ЛОКАЛЬНО:
  [ ] Проект создан (setup_project.py выполнен)
  [ ] Виртуальное окружение создано
  [ ] Зависимости установлены
  [ ] .env файл настроен
  [ ] Миграции применены
  [ ] Суперпользователь создан
  [ ] Сервер запускается (python manage.py runserver)
  [ ] Админка работает (/admin/)

НА TIMEWEB:
  [ ] Файлы загружены на сервер
  [ ] Виртуальное окружение создано
  [ ] wsgi.py настроен (правильные пути)
  [ ] .htaccess на месте
  [ ] .env создан и настроен
  [ ] База данных создана
  [ ] Миграции применены
  [ ] Статика собрана
  [ ] Суперпользователь создан
  [ ] Права установлены (755 для wsgi.py)
  [ ] Сайт открывается без ошибок


═══════════════════════════════════════════════════════════════════════
  🎓 ПЕРВЫЕ ШАГИ ПОСЛЕ УСТАНОВКИ
═══════════════════════════════════════════════════════════════════════

1. ВОЙДИТЕ В АДМИН-ПАНЕЛЬ
   https://ваш-домен.ru/admin/

2. ДОБАВЬТЕ ДАННЫЕ:
   
   Кабинеты → Создайте 2-3 кабинета
   Преподаватели → Добавьте учителей
   Родители → Внесите контакты
   Ученики → Добавьте учеников
   Группы → Создайте учебные группы
   Расписание → Настройте уроки

3. ИСПОЛЬЗУЙТЕ ИНТЕРФЕЙС:
   
   Dashboard    - Главная страница с статистикой
   Ученики      - Управление учениками
   Расписание   - Календарь занятий
   Финансы      - Учёт платежей
   Задачи       - To-Do список


═══════════════════════════════════════════════════════════════════════
  🚀 ПОЛЕЗНЫЕ КОМАНДЫ DJANGO
═══════════════════════════════════════════════════════════════════════

# Запуск локального сервера
python manage.py runserver

# Проверка проекта
python manage.py check

# Создание миграций
python manage.py makemigrations

# Применение миграций
python manage.py migrate

# Создание суперпользователя
python manage.py createsuperuser

# Сбор статики
python manage.py collectstatic

# Консоль Django
python manage.py shell

# Тесты
python manage.py test

# Показать миграции
python manage.py showmigrations


═══════════════════════════════════════════════════════════════════════
  📁 СТРУКТУРА СОЗДАННОГО ПРОЕКТА
═══════════════════════════════════════════════════════════════════════

tutor_crm/
│
├── manage.py                    # Django management
├── requirements.txt             # Зависимости
├── .env                         # Конфигурация (создать!)
├── .env.example                 # Пример конфигурации
├── .gitignore                   # Что не коммитить
│
├── tutor_crm/                   # Настройки Django
│   ├── settings.py              # Главные настройки
│   ├── urls.py                  # Главные маршруты
│   ├── wsgi.py                  # WSGI для production
│   └── asgi.py                  # ASGI (не используется)
│
├── apps/                        # Приложения
│   ├── students/                # Ученики и родители
│   │   ├── models.py           # Модели БД
│   │   ├── views.py            # Логика представлений
│   │   ├── urls.py             # Маршруты
│   │   ├── admin.py            # Админка
│   │   ├── forms.py            # Формы
│   │   └── serializers.py      # API
│   │
│   ├── teachers/                # Преподаватели
│   ├── schedule/                # Расписание, группы, кабинеты
│   ├── finance/                 # Финансы
│   └── tasks/                   # Задачи
│
├── templates/                   # HTML шаблоны
│   ├── base.html               # Базовый шаблон
│   ├── dashboard.html          # Главная страница
│   ├── students/               # Шаблоны учеников
│   ├── schedule/               # Шаблоны расписания
│   └── finance/                # Шаблоны финансов
│
├── static/                      # Статические файлы
│   ├── css/
│   │   └── styles.css
│   └── js/
│       └── main.js
│
├── public_html/                 # Для Timeweb
│   ├── wsgi.py                 # WSGI точка входа
│   └── .htaccess               # Apache конфиг
│
├── .github/                     # CI/CD
│   └── workflows/
│       └── deploy.yml          # GitHub Actions
│
└── docs/                        # Документация
    ├── python-rules.md
    ├── requirements.md
    ├── tasks.md
    └── timeweb-settings.md


═══════════════════════════════════════════════════════════════════════
  🎨 ЧТО ВКЛЮЧЕНО В СИСТЕМУ
═══════════════════════════════════════════════════════════════════════

МОДУЛИ:

✅ Ученики и родители
   • Полные карточки учеников
   • Контакты родителей (телефон, WhatsApp, Telegram)
   • Класс, предмет, тип обучения
   • Статусы (активен/неактивен/архив)

✅ Преподаватели
   • Профили учителей
   • Предметы
   • Почасовая ставка
   • Контакты

✅ Расписание
   • Визуальный календарь по дням недели
   • Группы (до 6 человек)
   • Индивидуальные занятия
   • Управление кабинетами
   • Фильтрация по преподавателям

✅ Финансы
   • Доходы от учеников
   • Расходы (зарплаты)
   • Статистика
   • История платежей

✅ Задачи
   • To-Do список
   • Привязка к ученикам
   • Статусы выполнения
   • Напоминания


ТЕХНОЛОГИИ:

Backend:  Python 3.6, Django 3.2, MySQL
Frontend: Tailwind CSS, JavaScript
Деплой:   Apache + mod_wsgi (Timeweb)
API:      Django REST Framework


═══════════════════════════════════════════════════════════════════════
  🔐 БЕЗОПАСНОСТЬ
═══════════════════════════════════════════════════════════════════════

ВАЖНО:

✅ Никогда не коммитьте .env файл в Git!
✅ Используйте разные SECRET_KEY для dev и production
✅ В production всегда DEBUG=False
✅ Регулярно делайте backup базы данных
✅ Используйте сильные пароли
✅ Настройте HTTPS (на Timeweb это в панели управления)


ГЕНЕРАЦИЯ БЕЗОПАСНОГО SECRET_KEY:

python -c "import secrets; print(secrets.token_urlsafe(50))"


BACKUP БАЗЫ ДАННЫХ:

# Создать backup
mysqldump -u username -p database_name > backup_$(date +%Y%m%d).sql

# Восстановить backup
mysql -u username -p database_name < backup_20250101.sql


═══════════════════════════════════════════════════════════════════════
  📊 ОСНОВНЫЕ МОДЕЛИ ДАННЫХ
═══════════════════════════════════════════════════════════════════════

Parent (Родитель)
  • name          - Имя
  • phone         - Телефон
  • whatsapp      - Ссылка на WhatsApp
  • telegram      - Ссылка на Telegram

Student (Ученик)
  • name          - Имя
  • grade         - Класс
  • parent        - Связь с родителем
  • subject       - Предмет
  • learning_type - Тип обучения (индивид./групп.)
  • group         - Группа (если групповое)
  • status        - Статус (активен/неактивен)
  • last_lesson_date - Дата последнего урока

Teacher (Преподаватель)
  • name          - Имя
  • subjects      - Предметы (через запятую)
  • phone         - Телефон
  • hourly_rate   - Ставка за час

Room (Кабинет)
  • name          - Название
  • capacity      - Вместимость

Group (Группа)
  • name          - Название
  • subject       - Предмет
  • teacher       - Преподаватель
  • room          - Кабинет
  • max_students  - Макс. учеников (обычно 6)

Lesson (Урок)
  • group/student - Группа или ученик
  • teacher       - Преподаватель
  • room          - Кабинет
  • weekday       - День недели (0-6)
  • start_time    - Время начала
  • duration      - Длительность (минуты)

Payment (Платёж)
  • student/teacher - Ученик или преподаватель
  • amount         - Сумма
  • payment_type   - Тип (доход/расход)
  • payment_date   - Дата

Task (Задача)
  • title         - Заголовок
  • description   - Описание
  • student       - Связь с учеником
  • status        - Статус (pending/in_progress/completed)
  • due_date      - Срок выполнения


═══════════════════════════════════════════════════════════════════════
  🌟 ПРЕИМУЩЕСТВА РЕШЕНИЯ
═══════════════════════════════════════════════════════════════════════

✅ ПОЛНАЯ АВТОМАТИЗАЦИЯ
   • 1 команда → весь проект готов
   • 1 команда → деплой на сервер
   • Git push → автообновление (GitHub Actions)

✅ ГОТОВО К PRODUCTION
   • Все настройки для Timeweb
   • Безопасность настроена
   • Производительность оптимизирована

✅ ПОЛНАЯ ДОКУМЕНТАЦИЯ
   • Быстрый старт
   • Подробные руководства
   • Решение проблем
   • Примеры использования

✅ ЛЕГКО РАСШИРЯТЬ
   • Модульная архитектура
   • API готов (Django REST Framework)
   • Можно добавлять новые функции

✅ АДАПТИВНЫЙ ДИЗАЙН
   • Работает на компьютерах
   • Работает на планшетах
   • Работает на смартфонах


═══════════════════════════════════════════════════════════════════════
  💡 СОВЕТЫ
═══════════════════════════════════════════════════════════════════════

1. СНАЧАЛА ЛОКАЛЬНО
   Всегда тестируйте изменения локально перед деплоем!

2. ИСПОЛЬЗУЙТЕ GIT
   Контроль версий сэкономит вам время и нервы

3. ДЕЛАЙТЕ BACKUP
   Регулярные копии БД - это важно!

4. ЧИТАЙТЕ ЛОГИ
   При ошибках смотрите ~/logs/error.log на сервере

5. СЛЕДУЙТЕ ДОКУМЕНТАЦИИ
   Всё уже описано в USAGE_GUIDE.md


═══════════════════════════════════════════════════════════════════════
  🆘 ПОЛУЧИТЬ ПОМОЩЬ
═══════════════════════════════════════════════════════════════════════

1. Прочитайте USAGE_GUIDE.md - там ответы на 90% вопросов

2. Проверьте логи:
   tail -f ~/logs/error.log

3. Запустите диагностику:
   python manage.py check
   python manage.py check --deploy

4. Используйте мастер-скрипт:
   bash start.sh → пункт 5 (Проверить статус)


═══════════════════════════════════════════════════════════════════════
  ✅ ФИНАЛЬНЫЙ ЧЕКЛИСТ
═══════════════════════════════════════════════════════════════════════

ПЕРЕД НАЧАЛОМ:
  [ ] Python 3.6+ установлен
  [ ] Git установлен (опционально)
  [ ] Все файлы скачаны (setup_project.py, start.sh, deploy_to_timeweb.sh)

ЛОКАЛЬНАЯ УСТАНОВКА:
  [ ] python3 setup_project.py выполнен
  [ ] Виртуальное окружение создано
  [ ] Зависимости установлены
  [ ] .env настроен
  [ ] Миграции применены
  [ ] Суперпользователь создан
  [ ] Сервер запускается

ДЕПЛОЙ НА TIMEWEB:
  [ ] MySQL база создана в панели Timeweb
  [ ] Скрипт деплоя выполнен
  [ ] .env создан на сервере
  [ ] Миграции применены на сервере
  [ ] Статика собрана
  [ ] Суперпользователь создан
  [ ] wsgi.py настроен (правильные пути)
  [ ] Права установлены
  [ ] Сайт открывается
  [ ] Админка работает


═══════════════════════════════════════════════════════════════════════
  🎉 ВСЁ ГОТОВО!
═══════════════════════════════════════════════════════════════════════

Теперь у вас есть полноценная CRM-система!

ВРЕМЯ УСТАНОВКИ: 5-10 минут
ФУНКЦИОНАЛ: 5 модулей, 8 моделей данных, 20+ страниц
АВТОМАТИЗАЦИЯ: Полная
ДОКУМЕНТАЦИЯ: Исчерпывающая

СЛЕДУЮЩИЕ ШАГИ:
  1. Войдите в админку: https://ваш-домен.ru/admin/
  2. Добавьте кабинеты, преподавателей, учеников
  3. Настройте расписание
  4. Начните использовать!

УДАЧИ! 🚀


═══════════════════════════════════════════════════════════════════════
  📞 КОНТАКТЫ
═══════════════════════════════════════════════════════════════════════

Документация:  README.md, USAGE_GUIDE.md
Быстрый старт:  QUICKSTART.md
Деплой:         DEPLOY.md
Git и CI/CD:    GIT_SETUP.md
Резюме:         SUMMARY.md


╔══════════════════════════════════════════════════════════════════════╗
║                      КОНЕЦ ИНСТРУКЦИИ                                ║
╚══════════════════════════════════════════════════════════════════════╝